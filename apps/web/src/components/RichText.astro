---
import payload from "payload";

export interface Props {
  content: any[];
}

const { content } = Astro.props;

const serialize = async (children: any[]) => {
  if (!children) return;

  return Promise.all(
    children.map(async (node, i) => {
      if ("text" in node) {
        let text = `${node.text}`;

        if (node.bold) {
          text = `<strong>${text}</strong>`;
        }

        if (node.code) {
          text = `<code>${text}</code>`;
        }

        if (node.italic) {
          text = `<em>${text}</em>`;
        }

        return text;
      }

      if (!node) {
        return null;
      }

      const children = await serialize(node.children);

      switch (node.type) {
        case "h1":
          return `<h1>${children}</h1>`;
        case "h2":
          return `<h2>${children}</h2>`;
        case "h3":
          return `<h3>${children}</h3>`;
        case "h4":
          return `<h4>${children}</h4>`;
        case "quote":
          return `<blockquote>${children}</blockquote>`;
        case "ul":
          return `<ul>${children}</ul>`;
        case "ol":
          return `<ol>${children}</ol>`;
        case "li":
          return `<li>${children}</li>`;
        case "link":
          return `<a href="${node.url}"">${children}</a>`;
        case "upload":
          const img = await payload.findByID({
            collection: "uploads",
            id: node.value.id,
          });
          return `<div class="upload"><img src="${img.sizes.resized.url || img.url}" /></div>`;
        default:
          return `<p>${children.length === 0 ? "<br/>" : children}</p>`;
      }
    })
  ).then((all) => all.join(""));
};
---

<style is:global>
  .upload {
    margin: 10px -20px;
    width: calc(100% + 40px);
  }

  .upload img {
    width: 100%;
  }
</style>

<div class="rich-text" set:html={await serialize(content)} />
